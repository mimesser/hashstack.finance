{"version":3,"sources":["../../src/index.ts"],"names":["chainIdToNetwork","PortisConnector","dAppId","networks","config","chainIds","Number","n","supportedChainIds","handleOnLogout","handleOnActiveWalletChanged","account","handleOnError","accounts","provider","portis","m","Portis","deactivate","chainId","newNetwork","AbstractConnector","emitUpdate","ConnectorEvent","emitError","emitDeactivate"],"mappings":"iTAIA,IAAMA,EAAkD,CACtD,EADsD,UAEtD,EAFsD,UAGpD,EAHoD,UAIpD,EAJoD,SAKtD,GALsD,QAMtD,IANsD,OAOtD,GAPsD,SAQtD,GARsD,gBAStD,GATsD,OAUtD,GAVsD,QAWtD,GAXsD,UAYtD,EAZsD,OAatD,IAbsD,cAcpD,GAdoD,qBAepD,IAfoD,eAgBpD,IAhBoD,OAiBpD,MAAK,gBAWIC,EAAb,Y,QAOE,c,MAAcC,WAAQC,a,IAAUC,oBAAS,KACjCC,EAAW,OAAa,kBAAgB,sBAA4BC,OAAOC,EAAnD,Y,OAE5BF,SAAe,oBAAkBL,EAAlB,OADjB,iBAIA,cAAM,CAAEQ,kBAAmBH,KAA3B,MAEA,SACA,aACA,WAEA,iBAAsB,wBAAtB,IACA,8BAAmC,qCAAnC,IACA,gBAAqB,uBAArB,I,IArBJ,G,EAAA,G,6EAAE,IAAF,cAAE,SAAF,eAwBUI,WAIN,uBA5BF,EAAF,4BA+BUC,YAIN,gBAAgB,CAAEC,aAnCpB,EAAF,cAsCUC,YAIN,mBA1CF,EAAF,oBAAI,I,wBAuDA,kBAAqB,EAArB,gBACA,+BAAkC,EAAlC,6BACA,iBAAoB,EAApB,e,gBAEsB,iCAAmC,mBAAgCC,EAAhC,OAAnC,eAAhBF,GAEN,MAAO,CAAEG,SAAU,SAAZ,SAAkCH,e,EAfpC,K,iBAAA,EAAKI,O,uBACa,0CAA4B,YAAC,4BAAIC,OAAJ,EAAIA,EAAC,SAAL,QAA7B,eAAfC,GACN,SAAc,MACZ,EADY,OAEZ,kBAAO,WAAP,GAAuCjB,EAAiB,WAAxD,IAA6E,WAFjE,GAGZ,EAHF,W,mDAhDN,oCAAE,EAAF,uBAAI,IAiEA,uBAAO,YAAP,UAjEJ,oCAAE,EAAF,sBAAI,IAqEA,uBAAO,0BAAP,gBArEJ,oCAAE,EAAF,sBAAI,IAyEA,uBAAO,gDAA+C,mBAAgCa,EAAhC,OAzE1D,oCAAE,EAAF,WA4ESK,WACL,sBAAqB,eACrB,mCAAkC,eAClC,qBAAoB,gBA/EtB,EAAF,4BAAI,I,MAqFE,K,MAFF,kBAAI,GACUlB,EAAZ,oBACA,uBAA0BA,EAA1B,MACA,aAAgB,CAAEmB,QAASC,MAE3B,4BACA,aAAgB,CAAED,QAASb,OAAOc,EAAD,Y,kBAzFvC,oCAAE,EAAF,iBAAI,I,MA8FM,K,uBAAA,oCACN,sBA/FJ,6C,2FA7BsBC,EAAtB,Y,4BAGgBb,Q,MAAkD,MAAlDA,kB,6BAEZ,oB,oHALJ,WAcYc,Y,KAIR,KAAUC,IAAV,W,EAlBJ,UAqBYC,Y,KAIR,KAAUD,IAAV,U,EAzBJ,eA4BYE,W,KAIR,KAAUF,IAAV,a,EAhCJ","file":"static/js/16.e046acf9.chunk.js","sourcesContent":["import { EventEmitter } from 'events'\nimport { AbstractConnectorArguments, ConnectorUpdate, ConnectorEvent } from '@web3-react/types'\n\nexport abstract class AbstractConnector extends EventEmitter {\n  public readonly supportedChainIds?: number[]\n\n  constructor({ supportedChainIds }: AbstractConnectorArguments = {}) {\n    super()\n    this.supportedChainIds = supportedChainIds\n  }\n\n  public abstract async activate(): Promise<ConnectorUpdate>\n  public abstract async getProvider(): Promise<any>\n  public abstract async getChainId(): Promise<number | string>\n  public abstract async getAccount(): Promise<null | string>\n  public abstract deactivate(): void\n\n  protected emitUpdate(update: ConnectorUpdate): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Update}' with payload`, update)\n    }\n    this.emit(ConnectorEvent.Update, update)\n  }\n\n  protected emitError(error: Error): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Error}' with payload`, error)\n    }\n    this.emit(ConnectorEvent.Error, error)\n  }\n\n  protected emitDeactivate(): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Deactivate}'`)\n    }\n    this.emit(ConnectorEvent.Deactivate)\n  }\n}\n"],"sourceRoot":""}